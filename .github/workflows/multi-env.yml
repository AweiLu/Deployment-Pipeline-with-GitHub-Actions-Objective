name: Multi-Stage Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  checks: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install & Build
        run: |
          # 檢查是否為 Node.js 專案
          if [ -f "package.json" ]; then
            echo "檢測到 Node.js 專案，安裝依賴..."
            npm install
            npm run build || echo "沒有 build 腳本，繼續執行"
          # 檢查是否為 Python 專案
          elif [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
            echo "檢測到 Python 專案，安裝依賴..."
            python -m pip install --upgrade pip
            if [ -f "requirements.txt" ]; then
              pip install -r requirements.txt
            fi
            if [ -f "setup.py" ]; then
              pip install -e .
            fi
          else
            echo "無法檢測專案類型，創建模擬構建產物..."
            mkdir -p dist
            cp -r * dist/ 2>/dev/null || :
            echo "模擬構建產物已創建"
          fi
          
      - name: Create build info
        run: |
          # 確保 dist 目錄存在
          mkdir -p dist
          echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" > dist/build-info.txt
          echo "BUILD_SHA=${GITHUB_SHA}" >> dist/build-info.txt
          echo "BUILD_REF=${GITHUB_REF}" >> dist/build-info.txt
          
      - uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: dist/

  test-unit:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist
      - name: Run Unit Tests
        run: |
          echo "🧪 執行單元測試..."
          
          # 檢查是否為 Node.js 專案
          if [ -f "package.json" ]; then
            echo "檢測到 Node.js 專案"
            npm install
            if grep -q "\"test:unit\"" package.json; then
              npm run test:unit || echo "❌ 測試失敗，但繼續流程用於演示"
            else
              echo "📝 執行模擬單元測試"
              echo "單元測試: ✅ 模擬通過"
            fi
          # 檢查是否為 Python 專案
          elif [ -f "pytest.ini" ] || [ -d "tests" ]; then
            echo "檢測到 Python 測試框架"
            python -m pip install --upgrade pip
            pip install pytest
            python -m pytest || echo "❌ 測試失敗，但繼續流程用於演示"
          else
            echo "📝 執行模擬單元測試"
            echo "單元測試: ✅ 模擬通過"
          fi

  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist
      - name: Run Integration Tests
        run: |
          echo "🧪 執行整合測試..."
          
          # 檢查是否為 Node.js 專案
          if [ -f "package.json" ]; then
            echo "檢測到 Node.js 專案"
            npm install
            if grep -q "\"test:integration\"" package.json; then
              npm run test:integration || echo "❌ 測試失敗，但繼續流程用於演示"
            else
              echo "📝 執行模擬整合測試"
              echo "API 整合測試: ✅ 模擬通過"
              echo "資料庫整合測試: ✅ 模擬通過"
            fi
          else
            echo "📝 執行模擬整合測試"
            echo "API 整合測試: ✅ 模擬通過"
            echo "資料庫整合測試: ✅ 模擬通過"
          fi

  deploy-staging:
    runs-on: ubuntu-latest
    needs: test-integration
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist
      
      - name: Release to Staging
        env:
          TEST_ENV: ${{ vars.TEST_ENV || 'staging' }}
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "部署到 ${TEST_ENV} 環境"
          
          # 打包構建產物為壓縮檔
          cd dist
          zip -r ../staging-release.zip .
          cd ..
          
          # 創建發布
          gh release create "staging-${{ github.run_id }}" staging-release.zip \
            --title "Staging Release ${{ github.run_id }}" \
            --notes "測試環境發布 - $(date)" \
            --prerelease
          
          echo "✅ 成功部署到測試環境"

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production   # 必須在 GitHub 設定 Required reviewers
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist
      
      - name: Release to Production
        env:
          TEST_ENV: ${{ vars.TEST_ENV || 'production' }}
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "部署到 ${TEST_ENV} 環境"
          
          # 打包構建產物為壓縮檔
          cd dist
          zip -r ../production-release.zip .
          cd ..
          
          # 創建發布
          gh release create "prod-${{ github.run_id }}" production-release.zip \
            --title "Production Release ${{ github.run_id }}" \
            --notes "生產環境發布 - 經過審批 - $(date)"
          
          echo "✅ 成功部署到生產環境"