name: CI/CD Deployment Pipeline

# 觸發條件：推送到 main 分支自動執行，也可手動觸發
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手動觸發

# 設定權限
permissions:
  contents: write     # 建立/更新 Release 需要
  actions: read       # 讀取 artifacts 需要
  checks: write       # 寫入測試結果需要

jobs:
  # 第一階段：測試和代碼品質檢查
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies & Run Tests
        run: |
          set -e
          echo "=== 檢測專案類型並執行測試 ==="
          
          if [ -f package.json ]; then
            echo "📦 檢測到 Node.js 專案"
            npm ci || npm install
            
            # 執行 linting 和測試
            npm run lint || echo "⚠️ 沒有 lint script，跳過"
            npm run test || echo "⚠️ 沒有 test script，跳過"
            
          elif [ -f setup.py ] || [ -f pyproject.toml ] || [ -f requirements.txt ]; then
            echo "🐍 檢測到 Python 專案"
            python -m pip install --upgrade pip
            
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            fi
            
            # 執行 Python 測試
            if [ -f requirements-dev.txt ]; then
              pip install -r requirements-dev.txt
            fi
            
            # 嘗試執行常見的測試命令
            python -m pytest || python -m unittest discover || echo "⚠️ 沒有找到測試，跳過"
            
          else
            echo "ℹ️ 沒有檢測到特定專案類型，跳過測試階段"
          fi

  # 第二階段：構建和打包
  build:
    name: Build & Package
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Build Application
        run: |
          set -e
          echo "=== 開始構建應用程式 ==="
          
          if [ -f package.json ]; then
            echo "📦 構建 Node.js 專案"
            npm ci || npm install
            npm run build || echo "⚠️ 沒有 build script，使用原始檔案"
            
          elif [ -f setup.py ] || [ -f pyproject.toml ]; then
            echo "🐍 構建 Python 專案"
            python -m pip install --upgrade pip
            
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            fi
            
            # 如果有 setup.py，嘗試構建
            if [ -f setup.py ]; then
              python setup.py build || echo "⚠️ Build 失敗，使用原始檔案"
            fi
            
          else
            echo "ℹ️ 通用專案，準備打包原始檔案"
          fi
          
          # 創建構建資訊
          echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> build-info.txt
          echo "BUILD_SHA=${GITHUB_SHA}" >> build-info.txt
          echo "BUILD_REF=${GITHUB_REF}" >> build-info.txt

      - name: Create Build Package
        run: |
          echo "📦 創建發布包..."
          # 排除不需要的檔案和目錄
          zip -r build-package.zip . \
            -x ".git/*" \
            -x ".github/*" \
            -x "node_modules/*" \
            -x "__pycache__/*" \
            -x "*.pyc" \
            -x "venv/*" \
            -x ".venv/*" \
            -x "*.log" \
            -x ".DS_Store"
          
          # 顯示包的大小
          ls -lh build-package.zip

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-package
          path: build-package.zip
          retention-days: 30

  # 第三階段：部署到開發環境
  deploy-dev:
    name: Deploy to Development
    needs: build
    runs-on: ubuntu-latest
    environment: development
    if: github.ref == 'refs/heads/main'  # 只在 main 分支執行
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Build Package
        uses: actions/download-artifact@v4
        with:
          name: build-package

      - name: Deploy to Development
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ vars.DEV_TAG || 'dev-latest' }}
          NOTE: ${{ vars.DEV_RELEASE_NOTE || 'Development release - automated deployment' }}
        run: |
          set -e
          echo "🚀 部署到開發環境..."
          
          # 如果 release 已存在，先刪除
          if gh release view "${TAG}" >/dev/null 2>&1; then
            echo "📝 刪除現有的開發版本 ${TAG}"
            gh release delete "${TAG}" --yes
          fi
          
          # 創建新的開發版本
          gh release create "${TAG}" build-package.zip \
            --title "Development Release - ${TAG}" \
            --notes "${NOTE}" \
            --prerelease
          
          echo "✅ 成功部署到開發環境！"

  # 第四階段：部署到測試環境
  deploy-staging:
    name: Deploy to Staging
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Build Package
        uses: actions/download-artifact@v4
        with:
          name: build-package

      - name: Deploy to Staging
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ vars.STAGING_TAG || 'staging-latest' }}
          NOTE: ${{ vars.STAGING_RELEASE_NOTE || 'Staging release - ready for QA testing' }}
        run: |
          set -e
          echo "🔄 部署到測試環境..."
          
          if gh release view "${TAG}" >/dev/null 2>&1; then
            echo "📝 刪除現有的測試版本 ${TAG}"
            gh release delete "${TAG}" --yes
          fi
          
          gh release create "${TAG}" build-package.zip \
            --title "Staging Release - ${TAG}" \
            --notes "${NOTE}" \
            --prerelease
          
          echo "✅ 成功部署到測試環境！"

  # 第五階段：部署到生產環境（需要人工審核）
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production  # 設定環境保護規則，需要人工審核
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Build Package
        uses: actions/download-artifact@v4
        with:
          name: build-package

      - name: Deploy to Production
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ vars.PROD_TAG || 'prod-latest' }}
          NOTE: ${{ vars.PROD_RELEASE_NOTE || 'Production release - stable version' }}
        run: |
          set -e
          echo "🚀 部署到生產環境..."
          
          if gh release view "${TAG}" >/dev/null 2>&1; then
            echo "📝 刪除現有的生產版本 ${TAG}"
            gh release delete "${TAG}" --yes
          fi
          
          gh release create "${TAG}" build-package.zip \
            --title "Production Release - ${TAG}" \
            --notes "${NOTE}"
          
          echo "🎉 成功部署到生產環境！"

  # 第六階段：部署後通知
  notify:
    name: Deployment Notification
    needs: [deploy-dev, deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Summary
        run: |
          echo "📊 部署摘要報告"
          echo "=================="
          echo "🔗 Commit: ${GITHUB_SHA:0:7}"
          echo "🌟 分支: ${GITHUB_REF_NAME}"
          echo "👤 觸發者: ${GITHUB_ACTOR}"
          echo "⏰ 時間: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "📋 部署狀態:"
          echo "- 開發環境: ${{ needs.deploy-dev.result }}"
          echo "- 測試環境: ${{ needs.deploy-staging.result }}"
          echo "- 生產環境: ${{ needs.deploy-production.result }}"