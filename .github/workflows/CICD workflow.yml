name: CI/CD Deployment Pipeline

# 觸發條件：只允許手動觸發（符合 Grade E 要求）
on:
  workflow_dispatch:

# 設定權限
permissions:
  contents: write     # 建立/更新 Release 需要
  actions: read       # 讀取 artifacts 需要

jobs:
  # Build Job - 與基礎任務相同
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Build Application
        run: |
          set -e
          echo "=== 開始構建應用程式 ==="
          
          if [ -f package.json ]; then
            echo "📦 構建 Node.js 專案"
            npm ci || npm install
            npm run build || echo "⚠️ 沒有 build script，使用原始檔案"
            
          elif [ -f setup.py ] || [ -f pyproject.toml ]; then
            echo "🐍 構建 Python 專案"
            python -m pip install --upgrade pip
            
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            fi
            
            # 如果有 setup.py，嘗試構建
            if [ -f setup.py ]; then
              python setup.py build || echo "⚠️ Build 失敗，使用原始檔案"
            fi
            
          else
            echo "ℹ️ 通用專案，準備打包原始檔案"
          fi
          
          # 創建構建資訊
          echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> build-info.txt
          echo "BUILD_SHA=${GITHUB_SHA}" >> build-info.txt
          echo "BUILD_REF=${GITHUB_REF}" >> build-info.txt

      - name: Create Build Package
        run: |
          echo "📦 創建發布包..."
          # 排除不需要的檔案和目錄
          zip -r build-package.zip . \
            -x ".git/*" \
            -x ".github/*" \
            -x "node_modules/*" \
            -x "__pycache__/*" \
            -x "*.pyc" \
            -x "venv/*" \
            -x ".venv/*" \
            -x "*.log" \
            -x ".DS_Store"
          
          # 顯示包的大小
          ls -lh build-package.zip

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build-package.zip
          retention-days: 30

  # Deploy Dev - 部署到開發環境
  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Deploy to Development Environment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          
          # 使用 dev-vX.Y 格式的標籤
          TAG="dev-v1.0"
          NOTE="Development build for testing"
          
          echo "🚀 部署到 Development 環境..."
          echo "標籤: ${TAG}"
          echo "說明: ${NOTE}"
          
          # 如果 release 已存在，先刪除以避免衝突
          if gh release view "${TAG}" >/dev/null 2>&1; then
            echo "📝 刪除現有的 dev 版本 ${TAG}"
            gh release delete "${TAG}" --yes
          fi
          
          # 創建 dev release
          gh release create "${TAG}" build-package.zip \
            --title "Development Release - ${TAG}" \
            --notes "${NOTE}" \
            --prerelease
          
          echo "✅ 成功部署到 Development 環境！"

  # Deploy Staging - 部署到 staging 環境
  deploy-staging:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Deploy to Staging Environment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          
          # 使用 staging-vX.Y 格式的標籤
          TAG="staging-v1.0"
          NOTE="Testing pre-production release"
          
          echo "🔄 部署到 Staging 環境..."
          echo "標籤: ${TAG}"
          echo "說明: ${NOTE}"
          
          # 如果 release 已存在，先刪除以避免衝突
          if gh release view "${TAG}" >/dev/null 2>&1; then
            echo "📝 刪除現有的 staging 版本 ${TAG}"
            gh release delete "${TAG}" --yes
          fi
          
          # 創建 staging release
          gh release create "${TAG}" build-package.zip \
            --title "Staging Release - ${TAG}" \
            --notes "${NOTE}" \
            --prerelease
          
          echo "✅ 成功部署到 Staging 環境！"

  # Deploy Production - 部署到 production 環境（需要手動審核）
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production  # 使用 production 環境（需要設定保護規則和審核者）
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Deploy to Production Environment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          
          # 使用 prod-vX.Y 格式的標籤
          TAG="prod-v1.0"
          NOTE="Production release - stable version"
          
          echo "🚀 部署到 Production 環境..."
          echo "標籤: ${TAG}"
          echo "說明: ${NOTE}"
          
          # 如果 release 已存在，先刪除以避免衝突
          if gh release view "${TAG}" >/dev/null 2>&1; then
            echo "📝 刪除現有的 production 版本 ${TAG}"
            gh release delete "${TAG}" --yes
          fi
          
          # 創建 production release（正式版本，不是 pre-release）
          gh release create "${TAG}" build-package.zip \
            --title "Production Release - ${TAG}" \
            --notes "${NOTE}"
          
          echo "🎉 成功部署到 Production 環境！"